"""
Alc Calc
Fast and easy calculator for distilation
Note: Calculator assumes STP conditions. This means that temperature measurements and dilution should occur at 101 KPa and 20C/68F
Calculator uses metric measures
Calculator assumes the wash is a mix of pure ethanol and water
"""

class Run:
    Cuts=[]
    Total_Volume = 0
    Total_Volume_Eth = 0
    Total_Volume_Water = 0
    Total_Mass = 0
    Total_Mass_Eth = 0
    Total_Mass_Water = 0
    Num_Cuts = 0
    
    def __init__(self, My_Cuts=None, My_Num_Cuts=0, My_Mass=0, My_Mass_Units = "g") -> None:
        
        self.Cuts.append(My_Cuts)

        

class Cut:
    from scipy import interpolate

    Cut_Mass = None                 #[g]
    Cut_Volume = None               #[L]
    Cut_Dist_Temp = None            #[C]
    Target_ABV = None               #[%]
    Cut_Number = None               #[#]
    Cut_ABW = None                  #[%]
    Cut_ABV= None                   #[%]
    Cut_Density = None              #[kg/L]
    Cut_Required_Dilution = None    #[L]
    

    #Important temperatures
    Ethanol_Boiling_Point = 78.2 #C
    Ethanol_Danger_Boiling_Point = 82.5 #[C] A boiling point at or below this value implies that a mix of 40% w% ethanol was boiled. This is dangerous 
    Water_Boiling_Point = 100 #[C]
    Max_Vapor_Ethanol_Content = 0.92 #%

    #Returns the metric conversion factor based on the prefix symbol, includes tonnes
    Metric_Prefixes = {
        "g": 1,
        "da": 10,
        "h": 100,
        "k":1000,
        "M": 10E6,
        "t": 10E6
    }

    """
    ------------ Ethanol weight percent by cut boiling point table ------------
    Table values from wikipedia
    
    """
    #Ethanol weight percent by cut boiling point table temperature values [C]
    Eth_Weight_Fract_Table_X=[78.2, 78.4, 78.6, 78.8, 79, 79.2, 79.4, 79.6, 79.8, 80, 80.2, 80.4, 80.6, 80.8, 81, 81.2, 81.4, 81.6, 81.8, 82, 82.5, 83, 83.5, 84, 84.5, 85, 85.5, 86, 86.5, 87, 87.5, 88, 88.5, 89, 89.5, 90, 90.5, 91, 91.5, 92, 92.5, 93, 93.5, 94, 94.5, 95, 95.5, 96, 96.5, 97, 97.5, 98, 98.5, 99, 99.5, 100]
   
    #Ethanol weight percent by cut boiling point table ethanol vapor fractions values [C]
    Eth_Weight_Fract_Table_Y=[92, 89, 88, 87, 86, 85, 85, 84, 84, 83, 83, 82, 82, 81, 81, 80, 80, 80, 79, 79, 78, 78, 77, 77, 75, 74, 73, 72, 71, 70, 69, 68, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 46, 44, 42, 39, 36, 33, 30, 27, 23, 19, 15, 10, 5, 0]
    Eth_Weight_Fract_Table=[Eth_Weight_Fract_Table_X,Eth_Weight_Fract_Table_Y]


    
    def Calc_Cut_ABW(self, decimals=2):
        #Returns the weight fraction of ethanol in the cut by the distilation temperature
        return self.Interpolate_Table(self.Eth_Weight_Fract_Table,0,1,self.Cut_Dist_Temp,decimals)

    """
    ------------ Cut density by ethanol weight fraction ------------
    Table values from wikipedia
    
    """
    #Cut density values [kg/L]
    Cut_Dens_Table_Y=[0.99823, 0.99804, 0.99785, 0.99766, 0.99748, 0.99729, 0.9971, 0.99692, 0.99673, 0.99655, 0.99636, 0.99618, 0.99599, 0.99581, 0.99562, 0.99544, 0.99525, 0.99507, 0.99489, 0.99471, 0.99453, 0.99435, 0.99417, 0.99399, 0.99381, 0.99363, 0.99345, 0.99327, 0.9931, 0.99292, 0.99275, 0.99257, 0.9924, 0.99222, 0.99205, 0.99188, 0.99171, 0.99154, 0.99137, 0.9912, 0.99103, 0.99087, 0.9907, 0.99053, 0.99037, 0.9902, 0.99003, 0.98987, 0.98971, 0.98954, 0.98938, 0.98922, 0.98906, 0.9889, 0.98874, 0.98859, 0.98843, 0.98827, 0.98811, 0.98796, 0.9878, 0.98765, 0.98749, 0.98734, 0.98718, 0.98703, 0.98688, 0.98673, 0.98658, 0.98642, 0.98627, 0.98612, 0.98597, 0.98582, 0.98567, 0.98553, 0.98538, 0.98523, 0.98508, 0.98493, 0.98478, 0.98463, 0.98449, 0.98434, 0.98419, 0.98404, 0.98389, 0.98374, 0.9836, 0.98345, 0.98331, 0.98316, 0.98301, 0.98287, 0.98273, 0.98258, 0.98244, 0.98229, 0.98215, 0.98201, 0.98187, 0.98172, 0.98158, 0.98144, 0.9813, 0.98117, 0.98103, 0.98089, 0.98075, 0.98061, 0.98047, 0.98033, 0.98019, 0.98006, 0.97992, 0.97978, 0.97964, 0.97951, 0.97937, 0.97923, 0.9791, 0.97896, 0.97883, 0.97869, 0.97855, 0.97842, 0.97828, 0.97815, 0.97801, 0.97788, 0.97775, 0.97761, 0.97748, 0.97735, 0.97722, 0.97709, 0.97696, 0.97683, 0.9767, 0.97657, 0.97643, 0.9763, 0.97617, 0.97604, 0.97591, 0.97578, 0.97565, 0.97552, 0.97539, 0.97526, 0.97514, 0.97501, 0.97488, 0.97475, 0.97462, 0.9745, 0.97438, 0.97425, 0.97412, 0.974, 0.97387, 0.97374, 0.97361, 0.97349, 0.97336, 0.97323, 0.9731, 0.97297, 0.97284, 0.97272, 0.97259, 0.97246, 0.97233, 0.9722, 0.97207, 0.97194, 0.97181, 0.97168, 0.97155, 0.97142, 0.97129, 0.97116, 0.97103, 0.97089, 0.97076, 0.97063, 0.9705, 0.97037, 0.97024, 0.9701, 0.96997, 0.96984, 0.96971, 0.96957, 0.96944, 0.96931, 0.96917, 0.96904, 0.96891, 0.96877, 0.96864, 0.9685, 0.96837, 0.96823, 0.9681, 0.96796, 0.96783, 0.96769, 0.96756, 0.96742, 0.96729, 0.96716, 0.96702, 0.96688, 0.96675, 0.96661, 0.96647, 0.96634, 0.9662, 0.96606, 0.96592, 0.96578, 0.96564, 0.96551, 0.96537, 0.96523, 0.96509, 0.96495, 0.96481, 0.96467, 0.96453, 0.96439, 0.96425, 0.96411, 0.96396, 0.96382, 0.96368, 0.96354, 0.9634, 0.96326, 0.96312, 0.96297, 0.96283, 0.96269, 0.96254, 0.9624, 0.96225, 0.96211, 0.96196, 0.96182, 0.96168, 0.96153, 0.96139, 0.96124, 0.96109, 0.96094, 0.9608, 0.96065, 0.9605, 0.96035, 0.9602, 0.96005, 0.9599, 0.95975, 0.95959, 0.95944, 0.95929, 0.95914, 0.95898, 0.95883, 0.95867, 0.95851, 0.95836, 0.9582, 0.95805, 0.95789, 0.95773, 0.95757, 0.95742, 0.95726, 0.9571, 0.95694, 0.95678, 0.95662, 0.95646, 0.9563, 0.95613, 0.95597, 0.95581, 0.95565, 0.95548, 0.95532, 0.95516, 0.95499, 0.95483, 0.95466, 0.9545, 0.95433, 0.95416, 0.954, 0.95382, 0.95365, 0.95349, 0.95332, 0.95315, 0.95298, 0.95281, 0.95264, 0.95247, 0.9523, 0.95212, 0.95195, 0.95178, 0.95161, 0.95143, 0.95126, 0.95108, 0.95091, 0.95074, 0.95056, 0.95038, 0.9502, 0.95003, 0.94985, 0.94967, 0.9495, 0.94932, 0.94914, 0.94896, 0.94878, 0.9486, 0.94842, 0.94824, 0.94806, 0.94788, 0.9477, 0.94752, 0.94734, 0.94715, 0.94697, 0.94679, 0.9466, 0.94642, 0.94624, 0.94605, 0.94587, 0.94568, 0.9455, 0.94531, 0.94512, 0.94494, 0.94475, 0.94456, 0.94438, 0.94419, 0.944, 0.94382, 0.94363, 0.94344, 0.94325, 0.94306, 0.94287, 0.94268, 0.94249, 0.9423, 0.94211, 0.94192, 0.94172, 0.94153, 0.94134, 0.94114, 0.94095, 0.94075, 0.94056, 0.94036, 0.94017, 0.93997, 0.93978, 0.93958, 0.93939, 0.93919, 0.93899, 0.93879, 0.93859, 0.9384, 0.9382, 0.938, 0.9378, 0.9376, 0.9374, 0.9372, 0.937, 0.9368, 0.9366, 0.9364, 0.9362, 0.93599, 0.93579, 0.93559, 0.93539, 0.93518, 0.93498, 0.93478, 0.93458, 0.93437, 0.93417, 0.93396, 0.93376, 0.93356, 0.93335, 0.93314, 0.93294, 0.93273, 0.93253, 0.93232, 0.93212, 0.93191, 0.9317, 0.93149, 0.93129, 0.93107, 0.93086, 0.93065, 0.93044, 0.93023, 0.93002, 0.92981, 0.9296, 0.92939, 0.92918, 0.92897, 0.92876, 0.92855, 0.92834, 0.92812, 0.92791, 0.9277, 0.92749, 0.92728, 0.92707, 0.92685, 0.92664, 0.92642, 0.92621, 0.926, 0.92579, 0.92557, 0.92536, 0.92515, 0.92493, 0.92472, 0.9245, 0.92429, 0.92408, 0.92386, 0.92365, 0.92343, 0.92322, 0.923, 0.92279, 0.92257, 0.92236, 0.92214, 0.92193, 0.92171, 0.9215, 0.92128, 0.92106, 0.92085, 0.92063, 0.92041, 0.92019, 0.91997, 0.91976, 0.91954, 0.91932, 0.9191, 0.91889, 0.91867, 0.91845, 0.91823, 0.91801, 0.9178, 0.91758, 0.91736, 0.91714, 0.91692, 0.9167, 0.91648, 0.91626, 0.91604, 0.91582, 0.9156, 0.91538, 0.91516, 0.91494, 0.91472, 0.9145, 0.91428, 0.91406, 0.91384, 0.91361, 0.91339, 0.91317, 0.91295, 0.91272, 0.9125, 0.91228, 0.91206, 0.91183, 0.9116, 0.91138, 0.91116, 0.91093, 0.91071, 0.91049, 0.91026, 0.91004, 0.90981, 0.90959, 0.90936, 0.90914, 0.90891, 0.90869, 0.90846, 0.90824, 0.90801, 0.90779, 0.90756, 0.90734, 0.90711, 0.90689, 0.90666, 0.90644, 0.90621, 0.90598, 0.90576, 0.90553, 0.90531, 0.90508, 0.90485, 0.90463, 0.9044, 0.90417, 0.90395, 0.90372, 0.90349, 0.90327, 0.90304, 0.90281, 0.90258, 0.90236, 0.90213, 0.9019, 0.90167, 0.90145, 0.90122, 0.90099, 0.90076, 0.90054, 0.90031, 0.90008, 0.89985, 0.89962, 0.89939, 0.89917, 0.89894, 0.89871, 0.89848, 0.89825, 0.89803, 0.8978, 0.89757, 0.89734, 0.89711, 0.89688, 0.89665, 0.89643, 0.8962, 0.89597, 0.89574, 0.89551, 0.89528, 0.89505, 0.89482, 0.89459, 0.89436, 0.89413, 0.8939, 0.89367, 0.89344, 0.89321, 0.89298, 0.89275, 0.89252, 0.89229, 0.89206, 0.89183, 0.8916, 0.89137, 0.89113, 0.8909, 0.89067, 0.89044, 0.89021, 0.88998, 0.88975, 0.88951, 0.88928, 0.88905, 0.88882, 0.88859, 0.88836, 0.88812, 0.88789, 0.88766, 0.88743, 0.8872, 0.88696, 0.88673, 0.8865, 0.88626, 0.88603, 0.8858, 0.88557, 0.88533, 0.8851, 0.88487, 0.88463, 0.8844, 0.88417, 0.88393, 0.8837, 0.88347, 0.88323, 0.883, 0.88277, 0.88253, 0.8823, 0.88206, 0.88183, 0.8816, 0.88136, 0.88113, 0.88089, 0.88066, 0.88042, 0.88019, 0.87995, 0.87972, 0.87948, 0.87925, 0.87901, 0.87878, 0.87854, 0.87831, 0.87807, 0.87784, 0.8776, 0.87737, 0.87713, 0.87689, 0.87666, 0.87642, 0.87619, 0.87595, 0.87572, 0.87548, 0.87524, 0.87501, 0.87477, 0.87454, 0.8743, 0.87406, 0.87383, 0.87359, 0.87336, 0.87312, 0.87288, 0.87265, 0.87241, 0.87218, 0.87194, 0.8717, 0.87147, 0.87123, 0.87099, 0.87075, 0.87052, 0.87028, 0.87004, 0.86981, 0.86957, 0.86933, 0.86909, 0.86885, 0.86862, 0.86838, 0.86814, 0.8679, 0.86766, 0.86742, 0.86718, 0.86694, 0.86671, 0.86647, 0.86623, 0.86599, 0.86575, 0.86551, 0.86527, 0.86503, 0.86479, 0.86455, 0.86431, 0.86407, 0.86383, 0.86339, 0.86335, 0.86311, 0.86287, 0.86263, 0.86239, 0.86215, 0.86191, 0.86167, 0.86143, 0.86119, 0.86095, 0.86071, 0.86047, 0.86022, 0.85998, 0.85974, 0.8595, 0.85926, 0.85902, 0.85878, 0.85854, 0.8583, 0.85806, 0.85781, 0.85757, 0.85733, 0.85709, 0.85685, 0.85661, 0.85636, 0.85612, 0.85588, 0.85564, 0.8554, 0.85515, 0.85491, 0.85467, 0.85443, 0.85419, 0.85394, 0.8537, 0.85346, 0.85322, 0.85297, 0.85273, 0.85249, 0.85225, 0.852, 0.85176, 0.85152, 0.85128, 0.85103, 0.85079, 0.85055, 0.85031, 0.85006, 0.84982, 0.84958, 0.84933, 0.84909, 0.84884, 0.8486, 0.84835, 0.84811, 0.84787, 0.84762, 0.84738, 0.84713, 0.84689, 0.84664, 0.8464, 0.84615, 0.8459, 0.84566, 0.84541, 0.84517, 0.84492, 0.84467, 0.84443, 0.84418, 0.84393, 0.84369, 0.84344, 0.84319, 0.84294, 0.8427, 0.84245, 0.8422, 0.84196, 0.84171, 0.84146, 0.84121, 0.84096, 0.84072, 0.84047, 0.84022, 0.83997, 0.83972, 0.83947, 0.83923, 0.83898, 0.83873, 0.83848, 0.83823, 0.83798, 0.83773, 0.83748, 0.83723, 0.83698, 0.83674, 0.83649, 0.83624, 0.83599, 0.83574, 0.83549, 0.83523, 0.83498, 0.83473, 0.83448, 0.83423, 0.83398, 0.83373, 0.83348, 0.83323, 0.83297, 0.83272, 0.83247, 0.83222, 0.83196, 0.83171, 0.83146, 0.8312, 0.83095, 0.8307, 0.83044, 0.83019, 0.82994, 0.82968, 0.82943, 0.82917, 0.82892, 0.82866, 0.8284, 0.82815, 0.82789, 0.82763, 0.82738, 0.82712, 0.82686, 0.8266, 0.82635, 0.82609, 0.82583, 0.82557, 0.82531, 0.82505, 0.82479, 0.82453, 0.82427, 0.82401, 0.82375, 0.82349, 0.82323, 0.82297, 0.82271, 0.82245, 0.82219, 0.82193, 0.82167, 0.8214, 0.82114, 0.82088, 0.82062, 0.82035, 0.82009, 0.81983, 0.81956, 0.8193, 0.81903, 0.81877, 0.8185, 0.81824, 0.81797, 0.8177, 0.81744, 0.81717, 0.8169, 0.81664, 0.81637, 0.8161, 0.81583, 0.81556, 0.81529, 0.81502, 0.81475, 0.81448, 0.81421, 0.81394, 0.81366, 0.81339, 0.81312, 0.81285, 0.81257, 0.8123, 0.81203, 0.81175, 0.81148, 0.8112, 0.81093, 0.81066, 0.81038, 0.8101, 0.80983, 0.80955, 0.80928, 0.809, 0.80872, 0.80844, 0.80817, 0.80789, 0.80761, 0.80733, 0.80705, 0.80677, 0.80649, 0.80621, 0.80593, 0.80565, 0.80537, 0.80509, 0.8048, 0.80452, 0.80424, 0.80395, 0.80367, 0.80338, 0.8031, 0.80281, 0.80253, 0.80224, 0.80195, 0.80166, 0.80138, 0.80109, 0.8008, 0.80051, 0.80022, 0.79993, 0.79963, 0.79934, 0.79905, 0.79875, 0.79846, 0.79816, 0.79787, 0.79757, 0.79727, 0.79698, 0.79668, 0.79638, 0.79608, 0.79578, 0.79547, 0.79517, 0.79487, 0.79456, 0.79426, 0.79396, 0.79365, 0.79335, 0.79305, 0.79274, 0.79243, 0.79213, 0.79182, 0.79151, 0.7912, 0.79089, 0.79059, 0.79028, 0.78997, 0.78966, 0.78934]

    #Cut weight fraction values [%]
    Cut_Dens_Table_X = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25, 25.1, 25.2, 25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26, 26.1, 26.2, 26.3, 26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27, 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 28, 28.1, 28.2, 28.3, 28.4, 28.5, 28.6, 28.7, 28.8, 28.9, 29, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7, 30.8, 30.9, 31, 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8, 31.9, 32, 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9, 33, 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34, 34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35, 35.1, 35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36, 36.1, 36.2, 36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37, 37.1, 37.2, 37.3, 37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38, 38.1, 38.2, 38.3, 38.4, 38.5, 38.6, 38.7, 38.8, 38.9, 39, 39.1, 39.2, 39.3, 39.4, 39.5, 39.6, 39.7, 39.8, 39.9, 40, 40.1, 40.2, 40.3, 40.4, 40.5, 40.6, 40.7, 40.8, 40.9, 41, 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7, 41.8, 41.9, 42, 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8, 42.9, 43, 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9, 44, 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45, 45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46, 46.1, 46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47, 47.1, 47.2, 47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48, 48.1, 48.2, 48.3, 48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49, 49.1, 49.2, 49.3, 49.4, 49.5, 49.6, 49.7, 49.8, 49.9, 50, 50.1, 50.2, 50.3, 50.4, 50.5, 50.6, 50.7, 50.8, 50.9, 51, 51.1, 51.2, 51.3, 51.4, 51.5, 51.6, 51.7, 51.8, 51.9, 52, 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7, 52.8, 52.9, 53, 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8, 53.9, 54, 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9, 55, 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56, 56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57, 57.1, 57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58, 58.1, 58.2, 58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59, 59.1, 59.2, 59.3, 59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60, 60.1, 60.2, 60.3, 60.4, 60.5, 60.6, 60.7, 60.8, 60.9, 61, 61.1, 61.2, 61.3, 61.4, 61.5, 61.6, 61.7, 61.8, 61.9, 62, 62.1, 62.2, 62.3, 62.4, 62.5, 62.6, 62.7, 62.8, 62.9, 63, 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7, 63.8, 63.9, 64, 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8, 64.9, 65, 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9, 66, 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67, 67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68, 68.1, 68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69, 69.1, 69.2, 69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70, 70.1, 70.2, 70.3, 70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71, 71.1, 71.2, 71.3, 71.4, 71.5, 71.6, 71.7, 71.8, 71.9, 72, 72.1, 72.2, 72.3, 72.4, 72.5, 72.6, 72.7, 72.8, 72.9, 73, 73.1, 73.2, 73.3, 73.4, 73.5, 73.6, 73.7, 73.8, 73.9, 74, 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7, 74.8, 74.9, 75, 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8, 75.9, 76, 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9, 77, 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78, 78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79, 79.1, 79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80, 80.1, 80.2, 80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81, 81.1, 81.2, 81.3, 81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82, 82.1, 82.2, 82.3, 82.4, 82.5, 82.6, 82.7, 82.8, 82.9, 83, 83.1, 83.2, 83.3, 83.4, 83.5, 83.6, 83.7, 83.8, 83.9, 84, 84.1, 84.2, 84.3, 84.4, 84.5, 84.6, 84.7, 84.8, 84.9, 85, 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7, 85.8, 85.9, 86, 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8, 86.9, 87, 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9, 88, 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89, 89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90, 90.1, 90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91, 91.1, 91.2, 91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92, 92.1, 92.2, 92.3, 92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93, 93.1, 93.2, 93.3, 93.4, 93.5, 93.6, 93.7, 93.8, 93.9, 94, 94.1, 94.2, 94.3, 94.4, 94.5, 94.6, 94.7, 94.8, 94.9, 95, 95.1, 95.2, 95.3, 95.4, 95.5, 95.6, 95.7, 95.8, 95.9, 96, 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7, 96.8, 96.9, 97, 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8, 97.9, 98, 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9, 99, 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9, 100]

    Cut_Dens_Table=[Cut_Dens_Table_X,Cut_Dens_Table_Y]

    def Calc_Cut_Density(self,decimals = 10):
        #returns the cut density [kg/L] by the ethanol weight fraction
        return self.Interpolate_Table(self.Cut_Dens_Table,0,1,self.Cut_ABW,decimals)

    def Interpolate_Table(self,Table: list,X_Index: int,Y_Index:int,X_Value_To_Interpolate, decimals:int=2):
        #Values are from a cubic interpolation of data tables
        #ToDo: set interpolation end conditions
        tck = self.interpolate.splrep(Table[X_Index],Table[Y_Index])
        return round(float(self.interpolate.splev(X_Value_To_Interpolate, tck)),decimals)
    
    def Calc_Cut_Volume(self):
        #Returns the cut volume from its mass and density
        return self.Cut_Mass/self.Cut_Density
        

    def Calc_Cut_Mass(self):
        #Returns the cut mass from its volume and density
        return self.Cut_Volume * self.Cut_Density
    
    def Calc_Cut_Req_Dilution(self):
        #Returns the amount of water [L] needed to achieve the desired diluted abv

        #L*(High_ABV/Low_ABV - 1)
        if(self.Cut_ABV==None):
            self.Cut_ABV = self.Calc_ABV()
        
        dilution = self.Cut_Volume*((self.Cut_ABV/self.Target_ABV) - 1)
        return dilution
    
    def Calc_ABV(self):
        #Returns the ABV from the ABW @ STP
        """ TL;DR This should be data driven but isnt currently.
        
        Superposition does not hold for the volume of ethanol-water mixes. That is, 50mL of ethanol mixed with 50mL of water will give a solution of about 98mL.
        This effect comes from the qualities of ethanol-water molecule interactions and the extent that the final mix volume deviates from the expected sum of its
        parts is actually dependent on the mix's ABW. Mixes with very high or low ABW behave mostly as expected, with greater deviation towards 50:50 mixes.
        Therefore, a simple conversition ratio of ~0.8 between ABW and ABV is sufficient for some but not all cases where high accuracy is needed. 
        
        
        % v/v values are sensitive to temperature to a degree less than 0.014%v/v/C occuring at ~50% v/v. 

        %w/w = %v/v * (density_ethanol/density_solution)

        """
            #[kg Eth/Kg Mix] -> [L Eth / L Mix]


        Mix_Vol =  0.78934#[Kg Eth / L Eth]

        simple_conv_ratio = 0.78934/0.99823 #[kg/L Eth]/[kg/L Water] 
        return self.Cut_ABW/simple_conv_ratio # [L Eth]/L Mix

    def __init__(self, My_Temperature, My_Mass, My_Target_ABV=0.4, My_Mass_Units = "g",My_Cut_Num = None) -> None:


        #Converts My_Mass to grams based on the metric unit prefix symbol
        My_Mass*=self.Metric_Prefixes[My_Mass_Units]


        #Ensure legal values for object parameters
        #Check for legal distilation temperatures
        
        if(My_Temperature <self.Ethanol_Boiling_Point):
            raise ValueError("The distilation temerature of this cut is too low")
        elif(My_Temperature>self.Water_Boiling_Point):
            raise ValueError("The distilation temperature of this cut is too high")
        elif(My_Temperature<self.Ethanol_Danger_Boiling_Point):
            print("DANGER: The temperature value entered implies you distilled low wine at or above 40 ABW.\nDistilling at this ethanol concentration is dangerious and can damage your still")
        
        #Basic check for legal ABV values. The target ABV can still be higher than whats possible from the distilation temperature
        if(My_Target_ABV<=0):
            raise ValueError("The target ABV is too low")
        elif(My_Target_ABV>self.Max_Vapor_Ethanol_Content):
            My_Target_ABV/=100 #protect against entries entered as 40 instead of 0.40 etc
            if(My_Target_ABV>self.Max_Vapor_Ethanol_Content):
                raise ValueError("The target ABV is too high")
            else:
                print("Warning: Calculator assumes you meant ",My_Target_ABV)
    
        if((My_Cut_Num != None)):
            if((not(isinstance(My_Cut_Num, int))or(isinstance(My_Cut_Num, float)))):
                raise ValueError("The cut number must be a real number")
            if(My_Cut_Num<=0):
                raise ValueError("the cut number must be positive")
        

                
        #Check for legal mass measurements
        if(My_Mass<=0):
            raise ValueError("The cut mass is too low")
        




        # Set class object values        
        self.Cut_Dist_Temp = My_Temperature
        self.Cut_Mass=My_Mass
        self.Target_ABV = My_Target_ABV
        self.Cut_ABW = self.Calc_Cut_ABW()
        self.Cut_Density = self.Calc_Cut_Density()
        self.Cut_Volume = self.Calc_Cut_Volume()

    #Getters
    def Get_Cut_Dist_Temp(self):
        return self.Get_Cut_Dist_Temp
    
    def Get_Cut_Mass(self):
        return self.Cut_Mass
    
    def Get_Target_ABV(self):
        return self.Target_ABV
    
    def Get_Cut_ABW(self):
        return self.Cut_ABW
    
    def Get_Cut_Number(self):
        return self.Cut_Number
    
    def get_Cut_Req_Dilution(self):
        return self.Cut_Required_Dilution
    
    def Get_Percentage(self,value):
        return value
    
    #Setters

    def Set_Cut_Mass(self,My_Mass)->None:
        self.Cut_Mass = My_Mass
    def Set_Dist_Temp(self,My_Temp)->None:
        self.Cut_Dist_Temp = My_Temp
    def Set_Cut_Number(self,My_Cut_Num)->None:
        self.Cut_Number = My_Cut_Num
    def Set_Target_ABV(self,My_Target_ABV)->None:
        self.Target_ABV = My_Target_ABV
    def Set_Cut_Number(self,My_Cut_Number)->None:
        self.Cut_Number = My_Cut_Number
    def Set_Cut_ABW(self,My_Cut_ABW)->None:
        self.Cut_ABW = My_Cut_ABW
    def Set_Cut_Req_Dilution(self,My_Req_Dilution)->None:
        self.Cut_Required_Dilution = My_Req_Dilution
    


def main():
    distil_temp = 93
    distill_mass = 15

    x1 = Cut(distil_temp,distill_mass,30)
    x2 = Cut(distil_temp,distill_mass,My_Mass_Units="k")

    print(x1.Target_ABV)
    print(x2.Get_Cut_Mass())

    print(x1.Calc_Cut_ABW())
    print(x1.Cut_Density)

    print(x1.Calc_Cut_Volume())
    print(x1.Calc_Cut_Mass())

    print(x1.Calc_Cut_Req_Dilution())



if __name__ == "__main__":
    main()